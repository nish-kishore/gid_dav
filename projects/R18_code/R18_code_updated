
## Install dependencies
required.packages <- c("tidyverse", "AzureStor","Microsoft365R", "readxl", "janitor","scales", "devtools","dplyr","stringr")
packages.to.install <- setdiff(required.packages, installed.packages())
if(length(packages.to.install) >0) install.packages(packages.to.install)

# GID PEB SIR Team functions - use to read data from ADLS


library(tidyverse)
library(readxl)
library(AzureStor)
library(Microsoft365R)
library(janitor)
library(scales)
library(ggplot2)
library(ggrepel)  
library(scales)   
library(dplyr)
library(stringr)

# GID PEB SIR Team functions - use to read data from ADLS
install.packages("devtools")
library(devtools)
devtools::install_github("nish-kishore/sirfunctions")

# getwd()

datt_task_id <- "R18"

#######################################################################
## READ INPUT DATA
#######################################################################

# Data set to read from ADLS
data_ctr_pop <- "data_clean/ctry_pop.rds"
data_ctr_pop <- sirfunctions::edav_io(io = "read", 
                                      default_dir = "GID/GIDMEA/giddatt", 
                                      file_loc = data_ctr_pop)

data_trvlr <- "data_clean/traveler_outbound.rds" 
data_trvlr <- sirfunctions::edav_io(io = "read", 
				default_dir = "GID/GIDMEA/giddatt", 
				file_loc = data_trvlr)
				

data_cases <- "data_clean/tbl1_1980-2023_casecounts_by_country_vpd.csv" 
data_cases <- sirfunctions::edav_io(io = "read",
				default_dir = "GID/GIDMEA/giddatt", 
				file_loc = data_cases)
				
data_zd<- "data_clean/wuenic2023.rds" 
data_zd<- sirfunctions::edav_io(io = "read",
				default_dir = "GID/GIDMEA/giddatt", 
				file_loc = data_zd)


# Ensure `ADM0_NAME` in `data_ctr_pop` is formatted consistently to match `country_name` 
data_ctr_pop <- data_ctr_pop %>% mutate(ADM0_NAME = str_to_title(tolower(ADM0_NAME))) 
	
# Replace the specific value in the ADM0_NAME column 
data_ctr_pop$ADM0_NAME <- ifelse(data_ctr_pop$ADM0_NAME == "Democratic Republic Of The Congo", "Democratic Republic of the Congo", data_ctr_pop$ADM0_NAME)

# Summarize num_cases_WHOofficial for Measles by country and year (2019-2023)
data_cases_summary <- data_cases %>%
  filter(vpd == "Measles", year >= 2019 & year <= 2023) %>%
  group_by(country_name, vpd, year) %>%  # Keeping vpd in the grouping
  summarize(total_cases = sum(num_cases_WHOofficial, na.rm = TRUE))

# 2) Summarize totalpop, u5pop, and u15pop by country for 2019-2023, keeping ISO_3_CODE 
data_ctr_pop_summary <- data_ctr_pop %>% filter(year >= 2019 & year <= 2023) %>% group_by(ISO_3_CODE, ADM0_NAME, year) %>% summarize( total_population = sum(totalpop, na.rm = TRUE), under5_population = sum(u5pop, na.rm = TRUE), under15_population = sum(u15pop, na.rm = TRUE) )

# Summarize count for each country for years 2019-2023 
data_trvlr_summary <- data_trvlr %>% filter(year >= 2019 & year <= 2023) %>% group_by(ctry, year) %>% summarize(total_travelers = sum(count, na.rm = TRUE))

# 4) Summarize n_miss for DTP1 by country for years 2019-2023 
data_zd_summary <- data_zd %>% filter(vaccine == "DTP1", year >= 2019 & year <= 2023) %>% group_by(ctry, year) %>% summarize(missed_DTP1 = sum(n_miss, na.rm = TRUE))

data_ctr_pop_summary <- data_ctr_pop_summary %>% mutate(ISO_3_CODE = ifelse(ISO_3_CODE == "COD", "DRC", ISO_3_CODE))



# Join the datasets based on country and year while keeping all columns 
final_summary <- data_cases_summary %>% full_join(data_ctr_pop_summary, by = c("country_name" = "ADM0_NAME", "year")) %>% full_join(data_trvlr_summary, by = c("country_name" = "ctry", "year")) %>% full_join(data_zd_summary, by = c("country_name" = "ctry", "year"))

# Define the countries of interest 
countries_of_interest <- c("Afghanistan", "Pakistan", "Nigeria", "Ethiopia", "Democratic Republic of the Congo", "Indonesia", "Philippines", "Brazil") 


library(scales)  # Load the scales package for formatting

# Summarize data for each country (2019-2023)
final_summary_aggregated <- final_summary %>%
  group_by(country_name, ISO_3_CODE) %>%  # Grouping only by country to ensure one row per country
  summarize(
    total_cases = sum(total_cases, na.rm = TRUE),
    total_population = sum(total_population, na.rm = TRUE),
    under5_population = sum(under5_population, na.rm = TRUE),
    under15_population = sum(under15_population, na.rm = TRUE),
    total_travelers = sum(total_travelers, na.rm = TRUE),
    missed_DTP1 = sum(missed_DTP1, na.rm = TRUE),
    .groups = "drop"  # Prevents grouped output
  ) %>%  # Close summarize() before applying mutate()
  mutate(
    zd_percentage = (missed_DTP1 / total_population),  # Keep as proportion
    zd_percentage_formatted = percent(zd_percentage, accuracy = 0.1)  # Convert to formatted percentage
  )

library(dplyr)  # Ensure dplyr is loaded

final_summary_aggregated <- final_summary_aggregated %>%
  drop_na()  # Removes all rows that contain any missing values

final_summary_aggregated <- final_summary_aggregated %>%
  filter(!is.na(total_population))

# Function to apply moderate jitter for small values
jitter_values <- function(x, threshold, moderate_jitter = 0.8, weak_jitter = 0.5) {
  ifelse(x < threshold, jitter(x, amount = moderate_jitter), jitter(x, amount = weak_jitter))
}

# Apply moderate jitter selectively (without extra jitter for PAK & IDN)
set.seed(42)  # Ensure reproducibility
final_summary_aggregated <- final_summary_aggregated %>%
  mutate(
    jittered_x = jitter_values(total_travelers, 10^2, moderate_jitter = 0.8, weak_jitter = 0.5),
    jittered_y = jitter_values(total_cases, 10^0, moderate_jitter = 0.8, weak_jitter = 0.5)
  )

# Define custom colors for priority countries
color_pal_9 <- c("#afabab","#A76DAB","#D76B6E","#334a54","#582d90", # Other Country, 8 GID CCs (individual)
               "#007B7A","#00a266","#D5006D","#a51d42")
 
#data$cc_cat = factor(data$cc_cat, levels = rev(c("AFG", "BRA", "DRC", "ETH","IDN", "NGA","PAK", 'PHL',"Other Country")))
#names(color_pal_9) <- levels(data$cc_cat) # use color_pal_9[data$cc_cat] in figs 1 & 2


# Create a mapping of full country names for the legend
priority_country_names <- c(
  "PHL" = "Philippines",
  "PAK" = "Pakistan",
  "NGA" = "Nigeria",
  "IDN" = "Indonesia",
  "ETH" = "Ethiopia",
  "DRC" = "Democratic Republic of the Congo",
  "BRA" = "Brazil",
  "AFG" = "Afghanistan"
)

# Manually set legend breaks to only show 0%, 1%, and 2%
breaks_list <- c(0, 0.01, 0.02)  

# Create the bubble chart with **strict axis limits from 10⁻² to 10⁸**
bubble_plot <- ggplot() +
  # Layer 1: Other country bubbles (semi-transparent, lowest layer)
  geom_point(data = final_summary_aggregated %>% filter(!ISO_3_CODE %in% names(custom_colors)),
             aes(x = jittered_x, y = jittered_y, size = zd_percentage),
             color = "#afabaa", alpha = 0.4, show.legend = FALSE) +  
 
  # Layer 2: Priority country bubbles (fully opaque, above other countries)
  geom_point(data = final_summary_aggregated %>% filter(ISO_3_CODE %in% names(custom_colors)),
             aes(x = jittered_x, y = jittered_y, size = zd_percentage, color = ISO_3_CODE),
             alpha = 1, show.legend = TRUE) +  

  # Logarithmic scales with **STRICT limits from 10⁻² to 10⁸**
  scale_x_log10(
    labels = trans_format("log10", math_format(10^.x)),  
    breaks = scales::trans_breaks("log10", function(x) 10^x),  
    limits = c(10^-2, 10^8),  # **STRICT LIMITS**
    expand = c(0, 0)  # **NO EXTRA PADDING**
  ) +
  
  scale_y_log10(
    labels = trans_format("log10", math_format(10^.x)),  
    breaks = scales::trans_breaks("log10", function(x) 10^x),  
    limits = c(10^-2, 10^8),  # **STRICT LIMITS**
    expand = c(0, 0)  # **NO EXTRA PADDING**
  ) +

  # Force correct legend title with line breaks and make it smaller
  scale_size(
    name = "Zero Dose Children\nas a Percentage\nof the Total Population",  # Wrapped title
    range = c(5, 20),
    breaks = breaks_list,  # Only show 0%, 1%, and 2% in legend
    labels = scales::percent_format(accuracy = 1),  # Display legend values as percentages
    guide = guide_legend(override.aes = list(size = c(5, 10, 20)))  # Match sizes to actual graph bubbles
  ) +  

  # Create a color legend using full country names instead of ISO codes
  scale_color_manual(
    name = "Priority Countries",  # Legend title
    values = color_palette_9,
    labels = priority_country_names
  ) +  

  guides(
    size = guide_legend(order = 1),  # Keep bubble size legend
    color = guide_legend(order = 2)  # Add color legend for priority countries
  ) +

  # Labels and theme
  labs(x = "Number of Travelers to the US", y = "Number of Measles Cases", 
       title = "Measles Cases vs. Travelers to the US by Country (2019-2023)\n(Bubble Size = Zero Dose Percentage)") +  
  theme_minimal() +
  theme(
    axis.text = element_text(size = 12, face = "bold"),  
    axis.title = element_text(size = 14, face = "bold"), 
    legend.title = element_text(size = 10, face = "bold"),  # Smaller legend title
    legend.text = element_text(size = 9),  # Smaller legend text
    legend.position = "right",  # Keep legend on right
    legend.justification = "center",  # Center-align legend
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  )

print(bubble_plot)

